#!/bin/bash
TITLE=""
ARTIST=""
YEAR=""
COVER=""
OUT=""
COMMENT=""

INFO=info.txt
bin_folder=$(dirname  $0)
if [ "$bin_folder" == "." -o -z "$bin_folder" ]; then
   _here=$(pwd)
   _cmdv=$(dirname $(command -v $0))
   echo "===== $0 is in $_cmdv or $_here"
else 
   echo "===== $0 is here $bin_folder"
fi
source json.bash || exit 1
#find . \( -name "*.mp3" -o -name "*.ogg" \) -print |grep --silent " "
#if [ $? -eq 0 ]; then
   #echo "Some of the files have spaces in their name.  Please use fixname."
   #exit 1
#   fixname *.mp3 *.ogg
#fi

if [ -f $INFO ]; then
   echo "Backing up $INFO to $INFO.bak"
   echo "You can use   diff $INFO $INFO.bak  to see the differences."
   mv $INFO $INFO.bak
fi
if [ -f rip.conf ]; then
   echo "RIPped CD collection detected.  Looking for .cdp (CDParanoia) files"
   cdp_count=$(/bin/ls *.cdp 2>/dev/null | wc -l)
   odxml_count=$(/bin/ls *.odxml 2>/dev/null | wc -l)
   if [ $cdp_count -gt 0 ]; then
       if [ $odxml_count -eq 0 ]; then
         /opt/audiobook_tools/applyodxml
       fi
   fi
fi
#find . \( -name "*.mp3" -o -name "*.ogg" \) -print | while read f; do
#for f in $(find . \( -name "*.mp3" -o -name "*.ogg" \) -print); do
for f in *.mp3 *.ogg; do
   if [ ! -f "$f" ]; then
      continue
   fi
   echo "Reading \"$f\" for helpful ID3v2 tags."
   id3=$(id3v2 -R "$f" |egrep -e '^[A-Z0-9][A-Z0-9][A-Z0-9][A-Z0-9]: ')
   #t=$(echo "$id3" | grep TIT2 | cut -f2- -d: )
   a=$(echo "$id3" | grep TPE1 | cut -f2- -d: | sed -e 's/^[ ]*//' )
   b=$(echo "$id3" | grep TALB | cut -f2- -d: | sed -e 's/^[ ]*//' )
   y=$(echo "$id3" | grep TYER | cut -f2- -d: | sed -e 's/^[ ]*//' )
   c=$(echo "$id3" | grep COMM | head -1 | cut -f3- -d: | sed -e 's/^[ ]*//' )
   cpr=$(echo "$id3" | grep TCOP | sed -E -e 's/.*(19(4|5|6|7|8|9)[0-9]|20(0|1|2|3)[0-9]).*/\1/' | grep -v TCOP )
   if [ -z "$TITLE" -a -n "$b" ]; then TITLE="$b"; echo "TITLE=$b"; fi
   if [ -z "$ARTIST" -a -n "$a" ]; then ARTIST="$a"; echo "ARTIST=$a"; fi
   if [ -z "$ALBUM" -a -n "$b" ]; then ALBUM="$b"; echo "ALBUM=$b"; fi
   if [ -z "$YEAR" -a -n "$y" ]; then YEAR="$y"; echo "YEAR=$y"; fi
   if [ -z "$YEAR" -a -n "$cpr" ]; then YEAR="$cpr"; echo "YEAR=$cpr"; fi
   if [ -z "$COMMENT" -a -n "$c" ]; then COMMENT="$c"; echo "COMMENT=$c"; fi
   if [ -n "$TITLE" -a -n "$ARTIST" -a -n "$ALBUM" -a -n "$YEAR" ]; then
      break;
   elif [ -z "$TITLE" ]; then echo "Missing TITLE"; 
   elif [ -z "$ARTIST" ]; then echo "Missing ARTIST"; 
   elif [ -z "$ALBUM" ]; then echo "Missing ALBUM"; 
   elif [ -z "$YEAR" ]; then echo "Missing YEAR"; 
   fi
done
if [ -n "$ARTIST" -a -n "$ALBUM" ]; then
   OUT=$(echo "$ARTIST-$ALBUM.m4b" | perl -ne '
	$_=lc $_; s/^\s+//; s/\s+$//; s/\s+/_/g; s/_?-_?/-/;s/\//,/g;print $_;')
else
   echo "The ARTIST and ALBUM could not be guessed. You will need to set them."
   OUT="$(basename $(pwd)).m4b" 
fi

cover_count=$(ls -1 |egrep -e '\.(jpg|png)$' |wc -l)
if [ $cover_count -gt 1 ]; then
   echo "# Please choose the cover you are looking for"  >> $INFO
   echo "Multiple cover graphics were found.  You will need to edit $INFO"
   echo "   and choose one, otherwise, the last one found will be picked."
elif [ $cover_count -eq 0 ]; then
   echo "No cover art was found."
else
   echo "Setting the cover art to $(ls -1tr |egrep -e '\.(jpg|png)$')"
fi
ls -1 |egrep -e '\.(jpg|png)$' | sed -e 's/^/COVER=/' >> $INFO

for k in TITLE ARTIST ALBUM YEAR OUT; do
   v=$(eval echo "\$$k")
   echo "$k=$v" >> $INFO
   echo "Set $k to \"$v\""
done
if [ -f rip.conf ]; then
   echo "COMMENT=$COMMENT" >> $INFO
else
   echo "COMMENT=Read by " >> $INFO
   echo "$COMMENT" > description.txt
fi

echo "Writing chapter information to $OUT.chapters.txt."
echo "   You should review the file and either edit it or delete it."
echo "   If you delete the chapters file, you may create equally-spaced"
echo "   bookmarks with   mp4chaps -e seconds *.m4b"

tot_sec=0
function fancy {
   echo $1 | perl -ne '
      chomp;
      $t=$_; $h=int($t / 3600); $m = int( ($t - $h*3600) / 60);
      $s = ( ($t - $h*3600) - ($m * 60) );
      printf "%02d:%02d:%02d.000", $h, $m, $s;
   '
}
CHAP=${OUT/.m4b/}.chapters.txt
CHAP=chapters.txt
wax=$(ls -1 |egrep -e '\.wax$' | tail -1)
if [ -n "$wax" ]; then
   echo "Overdrive book detected.  Auto building chapters."
   /opt/overdrive_chapters/overdrive_chapters.py *.mp3 > $CHAP
fi
if [ -f $CHAP ]; then
   echo "You have already selected the chapters.  Skipping chapter creation."
else
   numfiles=$(find . \( -name "*.mp3" -o -name "*.ogg" \) -print | wc -l)
   c=0
   #find . \( -name "*.mp3" -o -name "*.ogg" \) -print | sort | while read f; do
   #for f in $(find . \( -name "*.mp3" -o -name "*.ogg" \) -print | sort); do
   for f in *.mp3 *.ogg; do
      if [ ! -f "$f" ]; then
         continue
      fi
      if [ "${f/.mp3/}" != "$f" ]; then
         sec=$(mp3info -p "%S" "$f")
      elif [ "${f/.ogg/}" != "$f" ]; then
         sec=$(ogginfo -p "%S" "$f")
      fi
      if [ -z "$sec" -o "$sec" == "0" ]; then
         echo "One or more files ($f) do not have time information in them."
	 echo "A chapter file will not be created."
	 break;
      fi
      t="$(id3v2 -R "$f" |grep TIT2 | cut -f2- -d: |sed -e 's/^[ \t]*//')"
      if [ -z "$t" ]; then
	      id3v2 -C "$f" 2>/dev/null >/dev/null
         t="$(id3v2 -R "$f" |grep TIT2 | cut -f2- -d: |sed -e 's/^[ \t]*//')"
	 echo ""
	 echo "     ID3v2 tag converted for \"$f\""
      fi
      #echo "$f => $t"
      echo "$(fancy $tot_sec) $t" >> $CHAP
      tot_sec=$[ $tot_sec + $sec ]
      c=$[$c + 1]
      printf "Chapter info generated for file %03d/%03d (%s)    \r" $c $numfiles \
              "$(fancy $tot_sec)"
   done
   echo
fi

getAmazonLink() {
   base_url="https://www.amazon.com/s?k="
   params=$(echo "$@" | sed -e 's%/% %g; s/ /_/g; s/\//+/g; s/[-+\.={}\(\)\&\/\\]*//g;s/[_,]/+/g; s/++/+/g')
   url="$base_url$params"
   #echo "Retrieving URL: $base_url$params"
   #wget -O - --quiet "$base_url$params"
   echo "$url"
}
getGoogleBooksJSON() {
   base_url="https://www.googleapis.com/books/v1/volumes?maxResults=10&q="
   params=$(echo "$@" | sed -e 's/ /_/g; s/\//+/g; s/[-+,\.={}\(\)\&\/\\]*//g;s/_/+/g')
   url="$base_url$params"
   #echo "Retrieving URL: $base_url$params"
   wget -O - --quiet "$base_url$params"
}


echo "Getting potential book information from Google Books"
googleJSONFile=/tmp/$$.json
getGoogleBooksJSON "%22$ARTIST%22" "%22$ALBUM%22" "$YEAR" > $googleJSONFile


hits=$(grep '"id":' $googleJSONFile | wc -l)
if [ $hits -eq 0 ]; then
   echo "It appears that there is insufficient metadata to make a guess"
   echo "about the audiobook.  Please type some words that will be used to"
   echo "search Google."
   read -p "Keywords: " guess
   if [ -n "$guess" ]; then
      filtered_guess=$(echo "$guess"| sed -e 's/^/%22/; s/ /%22 %22/g; s/$/%22/')
      getGoogleBooksJSON $filtered_guess > $googleJSONFile
      hits=$(grep '"id":' $googleJSONFile | wc -l)
   else
      echo "Skipping Google lookup."
      touch $googleJSONFile
      hits=0
   fi
fi
vol_num=0
declare -a volumes
# if there are 10 hits, items are 0-9
while [ $vol_num -lt $hits ]; do
   title=$(cat "$googleJSONFile" | JSON.load | JSON.get /items/$vol_num/volumeInfo/title)
   author=$(cat "$googleJSONFile" | JSON.load | JSON.get /items/$vol_num/volumeInfo/authors/0)
   image=$(cat "$googleJSONFile" | JSON.load | JSON.get /items/$vol_num/volumeInfo/imageLinks/thumbnail)
   description=$(cat "$googleJSONFile" | JSON.load | JSON.get /items/$vol_num/volumeInfo/description | cut -c-64)
   #volumeId=$(cat "$googleJSONFile" | JSON.load | JSON.get /items/$vol_num/id)
   volumes[$vol_num]="[$title] [$author] [$image] [$description]"
   image_found="Image Available"
   if [ -z "$image" ]; then
      image_found="No Image"
   fi
   echo "$vol_num: [$title] [$author]"
   echo "  [$image_found] [$description]"
   vol_num=$[ $vol_num + 1 ]
done
echo "========================================================"
printf "Select an entry to grab the cover and description [blank for None]: "
read vol_num
if [ ! -z "$vol_num" ]; then
      image=$(cat "$googleJSONFile" | JSON.load | JSON.get /items/$vol_num/volumeInfo/imageLinks/thumbnail)
      description=$(cat "$googleJSONFile" | JSON.load | JSON.get /items/$vol_num/volumeInfo/description)
      echo "Retriving cover art... ($image)"
      # $image already has quotation marks in it
      wget -O cover.jpg --quiet $(echo $image | sed -e 's/^"//; s/"$//')
      echo "Writing the description to description.txt"
      echo "$description" > description.txt
      if [ $(echo "$description" | wc -c ) -gt 255 ]; then
         echo "  Warning: The description should be cut down to 255 characters."
      fi
else
   echo "No book selected."
fi
echo "Amazon link: $(getAmazonLink "%20$ARTIST%20" "%20$TITLE%20")"

rm $googleJSONFile
